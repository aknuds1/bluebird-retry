{
  "version": 3,
  "sources": [
    "node_modules/grunt-dry/node_modules/grunt-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "index.js",
    "lib/bluebird-retry.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "\nmodule.exports = require('./lib/bluebird-retry');\n",
    "var Promise = require('bluebird');\n\n// Retry `func` until it succeeds.\n//\n// Waits `options.interval` milliseconds (default 1000) between attempts.\n//\n// Increases wait by a factor of `options.backoff` each interval, up to\n// a limit of `options.max_interval`.\n//\n// Keeps trying until `options.timeout` milliseconds have elapsed,\n// or `options.max_tries` have been attempted, whichever comes first.\n//\n// If neither is specified, then the default is to make 5 attempts.\nfunction retry(func, options) {\n    options = options || {};\n\n    var interval = options.interval || 1000;\n\n    var max_tries, giveup_time;\n    if (typeof(options.max_tries) !== 'undefined') {\n        max_tries = options.max_tries;\n    }\n\n    if (options.timeout) {\n        giveup_time = new Date().getTime() + options.timeout;\n    }\n\n    if (!max_tries && !giveup_time) {\n        max_tries = 5;\n    }\n\n    var tries = 0;\n    var start = new Date().getTime();\n\n    // populate the caller's argument with a cancel function\n    // When invoked, we use its signal to break out of the retry loop\n    var cancelled;\n    var cancel = function(err) {\n        cancelled = true;\n        if (!(err instanceof Error)) {\n            err = new Error(err || 'cancelled');\n        }\n        throw err;\n    };\n\n    function try_once() {\n        var tryStart = new Date().getTime();\n        return Promise.try(function() {\n                return func(cancel);\n            })\n            .catch(function(err) {\n                if (cancelled) {\n                    return Promise.reject(err);\n                }\n                ++tries;\n                if (tries > 1) {\n                    interval = backoff(interval, options);\n                }\n                var now = new Date().getTime();\n\n                if ((max_tries && (tries === max_tries) ||\n                    (giveup_time && (now + interval >= giveup_time)))) {\n                    var timeout = new Error('operation timed out after ' + (now - start) + ' ms, ' + tries + ' tries' + ' failure: ' + err.message);\n                    timeout.failure = err;\n                    return Promise.reject(timeout);\n                } else {\n                    var delay = interval - (now - tryStart);\n                    if (delay <= 0) {\n                        return try_once();\n                    } else {\n                        return Promise.delay(delay).then(try_once);\n                    }\n                }\n            });\n    }\n    return try_once();\n}\n\n// Return the updated interval after applying the various backoff options\nfunction backoff(interval, options) {\n    if (options.backoff) {\n        interval = interval * options.backoff;\n    }\n\n    if (options.max_interval) {\n        interval = Math.min(interval, options.max_interval);\n    }\n\n    return interval;\n}\n\nmodule.exports = retry;\n"
  ]
}